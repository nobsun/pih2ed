-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/nobsun/pih2ed#readme</a>
@package pih2ed
@version 0.2.3.0


-- | <tt>double (double)</tt> の結果を算出する別の計算方法を考えましょう．
module Ch01Ex01

-- | 式
data Term
Num :: Int -> Term
Double :: Term -> Term
Add :: Term -> Term -> Term

-- | 簡約系列
--   
--   <pre>
--   &gt;&gt;&gt; mapM_ print (redSeqs sample)
--   [double (double 2),(double 2) + (double 2),(2 + 2) + (double 2),4 + (double 2),4 + (2 + 2),4 + 4,8]
--   [double (double 2),(double 2) + (double 2),(2 + 2) + (double 2),(2 + 2) + (2 + 2),4 + (2 + 2),4 + 4,8]
--   [double (double 2),(double 2) + (double 2),(2 + 2) + (double 2),(2 + 2) + (2 + 2),(2 + 2) + 4,4 + 4,8]
--   [double (double 2),(double 2) + (double 2),(double 2) + (2 + 2),(2 + 2) + (2 + 2),4 + (2 + 2),4 + 4,8]
--   [double (double 2),(double 2) + (double 2),(double 2) + (2 + 2),(2 + 2) + (2 + 2),(2 + 2) + 4,4 + 4,8]
--   [double (double 2),(double 2) + (double 2),(double 2) + (2 + 2),(double 2) + 4,(2 + 2) + 4,4 + 4,8]
--   [double (double 2),double (2 + 2),(2 + 2) + (2 + 2),4 + (2 + 2),4 + 4,8]
--   [double (double 2),double (2 + 2),(2 + 2) + (2 + 2),(2 + 2) + 4,4 + 4,8]
--   [double (double 2),double (2 + 2),double 4,4 + 4,8]
--   </pre>
redSeqs :: Term -> [[Term]]

-- | 1ステップ簡約
--   
--   <pre>
--   &gt;&gt;&gt; print (step sample)
--   [(double 2) + (double 2),double (2 + 2)]
--   </pre>
step :: Term -> [Term]
instance GHC.Show.Show Ch01Ex01.Term


-- | <tt>x</tt> の値によらず <tt>sum [x] = x</tt> であることを示してください．
module Ch01Ex02

-- | リストの要素の和
--   
--   <pre>
--   sum []     = 0           -- (1)
--   sum (n:ns) = n + sum ns  -- (2)
--   
--   </pre>
--   
--   <pre>
--   sum [x]
--   = { [x] ≡ (x:[]) }
--   sum (x:[])
--   = { sumの定義(2) }
--   x + sum []
--   = { sumの定義(1) }
--   x + 0
--   = { 0 は + の単位元 }
--   x
--   
--   </pre>
sum :: Num p => [p] -> p


-- | 数値のリストに対し積を計算する関数 <tt>product</tt> を定義し，<tt>product [2,3,4]</tt> =
--   <tt>24</tt> であることを示してください．
module Ch01Ex03

-- | リストの要素の和
--   
--   <pre>
--   product []     = 1           -- (1)
--   product (n:ns) = n * sum ns  -- (2)
--   
--   </pre>
--   
--   <pre>
--   product [2,3,4]
--   = { [2,3,4] = (2:[3,4]) }
--   product (2:[3,4])
--   = { product の定義(2) }
--   2 * product [3,4]
--   = { [3,4] = (3:[4]) }
--   2 * product (3:[4])
--   = { product の定義(2) }
--   2 * (3 * product [4])
--   = { [4] = (4:[]) }
--   2 * (3 * product (4:[]))
--   = { product の定義(2) }
--   2 * (3 * (4 * product []))
--   = { product の定義(1) }
--   2 * (3 * (4 * 1))
--   = { 4 * 1 = 4 }
--   2 * (3 * 4)
--   = { 3 * 4 = 12 }
--   2 * 12
--   = { 2 * 12 = 12 }
--   24
--   
--   </pre>
product :: Num p => [p] -> p


-- | リストを降順に整列するように関数<tt>qsort</tt>の定義を変えるにはどうすればよいでしょうか？
module Ch01Ex04

-- | 降順に整列
--   
--   <pre>
--   qsort []     = []                                    -- (1)
--   qsort (x:xs) = qsort larger ++ [x] ++ qsort smaller  -- (2) qsort smaller と qsort larger を交換
--     where
--       smaller = [a | a &lt;- xs, a &lt;= x]
--       larger  = [b | b <a>xs, b</a> x]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; qsort [3,5,1,4,2]
--   [5,4,3,2,1]
--   </pre>
qsort :: Ord a => [a] -> [a]


-- | <tt>qsort</tt>の定義で，<tt>&lt;=</tt> を <tt>&lt;</tt>
--   に置き換えるとどのような影響があるでしょうか？
module Ch01Ex05

-- | <pre>
--   qsort []     = []                                    -- (1)
--   qsort (x:xs) = qsort smaller ++ [x] ++ qsort larger  -- (2)
--     where
--       smaller = [a | a &lt;- xs, a &lt; x] -- <tt>&lt;=</tt> を <tt>&lt;</tt> に置き換える
--       larger  = [b | b <a>xs, b</a> x]
--   </pre>
--   
--   <tt>qsort</tt>の定義で，<tt>&lt;=</tt> を <tt>&lt;</tt>
--   に置き換えると，ピボットとと同値のピボット以外の要素を落してしまうことになる．
--   
--   <pre>
--   &gt;&gt;&gt; qsort [2,2,3,1,1]
--   [1,2,3]
--   </pre>
qsort :: Ord a => [a] -> [a]


-- | この章の例題をGHCiを用いて実行してください
module Ch02Ex01


-- | 次の式に結合順位を示す括弧を付けてください．
module Ch02Ex02


-- | 以下のプログラムにはエラーが三つあります．エラーを修正してGHCiで正しく動くか確かめてください．
module Ch02Ex03

-- | プログラムの修正
--   
--   <pre>
--   N =  a <a>div</a> length xs     -- (1)変数名は小文字アルファベット．(2)関数<tt>div</tt>を中置演算子に変更するには<tt>`</tt>で囲む．
--        where
--            a = 10
--           xs = [1,2,3,4,5]   -- (3)同一レベルのバインディングでは左辺のインデント位置を同じにする．
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; n
--   2
--   </pre>
n :: Int

module Lib

-- | 「なんか関数」を標準出力に印字する &gt;&gt;&gt; someFunc なんか関数
someFunc :: IO ()
